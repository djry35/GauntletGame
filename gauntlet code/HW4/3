#include "structs.h"
#include "funcs.h"


int playGame1(Game* game, BeginnerBot* bBot)
{
	while(1)
	{
		printBoard(game);
	
		printf("Select your square (you are X): \n");
		printf("Row (0-3): ");
		int row, column;
		scanf("%d", &row);
		printf("Column (0-3): ");
		scanf("%d", &column);
		
		if(row == -1) break;

		game->squares[row][column].mark = X;
			
		int c = updateGame(game, &(game->squares[row][column]), X);
		
		if(c != 0) return c;

		Square* AIsquare = AIcompute1(bBot, &(game->squares[row][column]), game);	
		AIsquare->mark = O;
		c = updateGame(game, AIsquare, O);
		
		if(c != 0) return c;

	}
	
	return 0;
}

int updateGame(Game* game, Square* justMarked, Marking m)
{	
	Node* justMoved, *other;

	if(m == O)
	{
		justMoved = game->listOfAINodes;
		other = game->listOfHumanNodes;
	}
	else
	{	
		justMoved = game->listOfHumanNodes;
		other = game->listOfAINodes;
	}

	Node* tmp = other;
	Node* prev = tmp;
	Node* next = tmp->nextNode;

	while(tmp)
	{
		//check if justMarked matches a win 

		if(tmp->toWin == justMarked && m == O)
			return -1;
		else if(tmp->toWin == justMarked && m == X)
			return 1;

		prev = tmp;
		tmp = tmp->nextNode;
		next = tmp->nextNode;
	}

	//figure out if any new win cons came up, add to list
	
	tmp = prev = justMoved;
	next = tmp->nextNode;
	while(tmp)
	{
		//check if justMarked blocks a win
		//update otherjustMovedto remove matching node
		//NOTE: only has to be done for Human. AI is handled
		//in AIcompute1() (fix?)

		prev = tmp;
		tmp = tmp->nextNode;
		next = tmp->nextNode;
	}

	//update game with updated lists.
	if(m == X)
	{
		game->listOfHumanNodes = justMoved;
		game->listOfAINodes = other;
	}
	else
	{
		game->listOfAINodes = justMoved;
		game->listOfHumanNodes = other;
	}

	
	//calculate status here. This is from heuristic, probably.
	int numAIWinSpots = 0, numHumanWinSpots = 0;

	//I believe this is cat's game.
	//(can you have one be NULL and the other not?)
	if(!justMoved && !other)
		return INFINITY;
	
	return 0;
}

Square* AIcompute1(BeginnerBot* bBot, Square* s, Game* game)
{
	Node* oppNode = game->listOfHumanNodes;
	Node* AINode = game->listOfAINodes;

	if(AINode)
	{
		//I mean.....the AI just won. Is this necessary?
		Square* choice = AINode->toWin;
		game->listOfAINodes = AINode->nextNode;
		free(AINode);
		return choice;
	}
	else if(oppNode)
	{
		Square* choice = oppNode->toWin;
		game->listOfHumanNodes = oppNode->nextNode;
		free(oppNode);
		return choice;
	}
	else
	{
		Square* choice = bBot->squareChoices->square;
		Choice* tmp = bBot->squareChoices;
		bBot->squareChoices = bBot->squareChoices->nextChoice;
		free(tmp);
		return choice;
	}

	//can't get here. 
	return NULL;
}

void printBoard(Game* game)
{
	printf("----------Board--------------\n");
	printf("state: %f (negative = AI is winning)\n\n", game->status);

	int w = 4, h = 4;
	int x, y;
	int i = -1, j = -1; 
	Square** squares = game->squares;

	for(y = 0; y < h; y++)
	{
		i++;
		printf("\n");
		for(x = 0; x < w; x++)
		{
			printf("+---");
		}
		printf("+\n");
		for(x = 0; x < w; x++)
		{
			j++;
			if(squares[i][j].mark == NONE)
				printf("|   ");
			else if(squares[i][j].mark == X)
				printf("| X ");
			else
				printf("| O ");
		}
		printf("|");
		j = -1;
	}
	printf("\n");
	for(x = 0; x < w; x++)
	{
		printf("+---");
	}
	printf("+\n\n\n");

}
